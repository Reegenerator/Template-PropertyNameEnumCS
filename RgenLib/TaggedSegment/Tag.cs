using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using RgenLib.Attributes;
using RgenLib.Extensions;

namespace RgenLib.TaggedSegment
{
    public partial class Manager<T> where T : TaggedCodeRenderer, new()
    {
        /// <summary>
        /// A superset of OptionAttribute, containing other information generated by the renderer
        /// </summary>
        public abstract class Tag
        {

            public Tag()
            {
                RegenMode = RegenModes.Once;
            }
            public const string TagName = "Gen";

            public const string RendererAttributeName = "Renderer";
            // ReSharper disable once StaticFieldInGenericType
            static XElement _TagPrototype;
            public static XElement TagPrototype {
                get {
                    if (_TagPrototype == null) {

                        _TagPrototype = new XElement(Tag.TagName);
                        _TagPrototype.Add(new XAttribute(Tag.RendererAttributeName, typeof(T).Name));
                    }
                    return _TagPrototype;
                }
            }

            public T OptionAttribute { get; set; }
            [XmlAttribute("Category")]
            public string Category { get; set; }
            [XmlAttribute("Regen")]
            public RegenModes RegenMode { get; set; }
            public TagTypes TagType { get; set; }
            [XmlAttribute("Version")]
            public Version Version { get; set; }


            /// <summary>
            /// Allow access to protected MemberwiseClone();
            /// </summary>
            /// <returns></returns>
            public new virtual Tag MemberwiseClone()
            {
                return (Tag) base.MemberwiseClone();
            }




        }
    }
}
