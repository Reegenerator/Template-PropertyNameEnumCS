using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using RgenLib.Attributes;
using RgenLib.Extensions;

namespace RgenLib.TaggedSegment {
    /// <summary>
    /// A superset of OptionAttribute, containing other information generated by the renderer
    /// </summary>
    public abstract class Tag {
        public const string TagName = "Gen";

        public const string RendererAttributeName = "Renderer";
        protected class IgnorePropertyInComparisonAttribute : Attribute{
            
        }
        
        public string Category { get; set; }
        public RegenModes RegenMode { get; set; }
        public TagTypes TagType { get; set; }
        public Version Version { get; set; }
        /// <summary>
        /// Allow access to protected MemberwiseClone();
        /// </summary>
        /// <returns></returns>
        public new virtual Tag MemberwiseClone() {
            return (Tag)base.MemberwiseClone();
        }

        protected abstract Dictionary<string, Object> GetCurrentValues();

      
        public virtual bool Equals(Tag other)
        {
           var thisDict = this.GetCurrentValues();
            var otherDict = other.GetCurrentValues();
            var isAllEqual = thisDict.All(x => x.Value == otherDict[x.Key]);
            return isAllEqual;
        }
        
    }
}
